.data
mais:        .string "+"
menos:       .string "-"
str:         .string "\n"

.text
main:
    # Le o número para fa0
    li a7, 6                 
    ecall
     
    # 1 - Escreve o número de fa0
    li a7, 2 
    ecall  
    
    # Imprime a \n na tela
    li a7, 4                # "load immediate" -> O registrador a7 recebe o número 4
    la a0, str              # "load address" -> Carrega o endereço da mensagem em a0
    ecall                   # Realiza a ação registrada em a7, usando a0 como recipiente (4: imprime string guardada em a0)       
    
    # 2 - Escreve se é positivo ou negativo
    li a0, 0           # Carrega o valor inteiro 0 em a0
    fmv.w.x fa1, a0    # Converte o valor inteiro em a0 para um número de ponto flutuante em fa1
    fge.s t1, fa0, fa1 # Se float>=0.0 --> t1 recebe 1
    
    beqz t1, negativo
    la a0, mais
    j continue
    
  negativo:
    la a0, menos
    
  continue:
    li a7, 4
    ecall        
           
    # Imprime a \n na tela
    li a7, 4                # "load immediate" -> O registrador a7 recebe o número 4
    la a0, str              # "load address" -> Carrega o endereço da mensagem em a0
    ecall                   # Realiza a ação registrada em a7, usando a0 como recipiente (4: imprime string guardada em a0)     
                                   
    # 3 - Escreve o expoente 
    fmv.x.s a0, fa0         # Converte o número de ponto flutuante em fa0 para um inteiro em a0
    srai a0, a0, 23         # Desloca a0 23 bits para a direita
    andi t0, a0, 0xFF       # Extrai os 8 bits mais baixos do valor deslocado e os armazena em t0
    addi t0, t0, -127      # Subtrai 127 do expoente para compensar o bias do formato IEEE 754

    li a7, 1
    mv a0, t0
    ecall 
    
    # Imprime a \n na tela
    li a7, 4                # "load immediate" -> O registrador a7 recebe o número 4
    la a0, str              # "load address" -> Carrega o endereço da mensagem em a0
    ecall                   # Realiza a ação registrada em a7, usando a0 como recipiente (4: imprime string guardada em a0)          


    # 4 - Escreve o mantissa em hexadeciamal 
    fmv.x.s a0, fa0            # Converte o número de ponto flutuante em fa0 para um inteiro em a0
    li t0, 0x007FFFFF          # Carrega a máscara para a mantissa (23 bits com valor 1)
    and t0, a0, t0             # Aplica a máscara para extrair a mantissa
 
   
    li t1, 0x00800000          # Carrega o valor imediato para o bit oculto (bit implícito)
    slli t1, t1, 1             # Desloca logicamente o valor em t1 em 1 bit para a esquerda
    or t0, t0, t1              # Adiciona o bit oculto à mantissa
    
    li t2, 0x01000000         # Carrega o valor 0x01000000 em t1
    sub t0, t0, t2  		# Corrige o erro de  0x01000000 no valor

    li a7, 34
    mv a0, t0
    ecall 

    # Imprime a \n na tela
    li a7, 4                # "load immediate" -> O registrador a7 recebe o número 4
    la a0, str              # "load address" -> Carrega o endereço da mensagem em a0
    ecall                   # Realiza a ação registrada em a7, usando a0 como recipiente (4: imprime string guardada em a0)                  
                                               
    # Return 0
    li a0, 0		     # "load immediate" -> O registrador a0 recebe o numero 0
    li a7, 93 		     # "load immediate" -> O registrador a7 recebe o numero 93
    ecall 		     # Realiza a ação registrada em a7, usando a0 como recipiente (93: exit)