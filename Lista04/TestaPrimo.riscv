.data
invalido:   .string "Entrada invalida.\n"
nao:        .string "nao\n"
sim:        .string "sim\n"


.text
main:
    # Le o número inteiro que sera testado (n)
    li a7, 5                 # "load immediate" -> O registrador a7 recebe o número 5
    ecall                    # Realiza a ação registrada em a7, usando a0 como recipiente (5: le inteiro e guarda em a0)
    mv t1, a0                # Salva o número de perguntas em t1
    
    # Checa se n é uma entrada valida
    blez t1, branchINVALIDO  # Basicamente finaliza o programa se o valor entrado é menor que 0
    
    # Checa se n é 1
    li t2, 1
    beq t1, t2, branchNAO    # Se n = 1 nao é primo    
    
    # Checa se n é 2
    li t2, 2
    beq t1, t2, branchSIM    # Se n = 2 nao é primo
    
    # Calcula raiz superior - ate onde devemos testar (sqrt(n)) 
    fcvt.s.w ft1, t1         # Converte t1 para o ponto flutuante em ft1
    fsqrt.s ft2, ft1         # Calcula a raiz quadrada e armazena em ft2
    fcvt.w.s t5, ft2         # Converte o número de ponto flutuante para inteiro e armazena em t5 
    addi t5, t5, 1
    
    # Procura por um divisor de 0 ate sqrt(n)
    li t3, 2
    loop:
    	bge t3, t5, branchSIM        # Se nao encontrou nada ate t3 passar sqrt(n) eh primo
    	rem t4, t1, t3               # Calcula o resto da divisão de t1 por t3
	beqz t4, branchNAO           # Se resto for 0 nao eh primo

    	addi t3, t3, 1		     # Incrementa t3
    	j loop
       
    end:
    # Imprime a mensagem na tela
    li a7, 4                # "load immediate" -> O registrador a7 recebe o número 4
    ecall                   # Realiza a ação registrada em a7, usando a0 como recipiente (4: imprime string guardada em a0)

    # Return 0
    li a0, 0		     # "load immediate" -> O registrador a0 recebe o numero 0
    li a7, 93 		     # "load immediate" -> O registrador a7 recebe o numero 93
    ecall 		     # Realiza a ação registrada em a7, usando a0 como recipiente (93: exit)


branchINVALIDO:
   la a0, invalido          # a0 é iniciado com a mensagem de invalido
   j end

branchSIM:
   la a0, sim          	    # a0 é iniciado com a mensagem sim
   j end

branchNAO:
   la a0, nao              # a0 é iniciado com a mensagem nao
   j end
   
