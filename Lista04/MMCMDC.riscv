.data
invalido:   	    .string "Entrada invalida."
quebralinha:        .string "\n"


.text
main:
    # Le o número inteiro (a)
    li a7, 5                 # "load immediate" -> O registrador a7 recebe o número 5
    ecall                    # Realiza a ação registrada em a7, usando a0 como recipiente (5: le inteiro e guarda em a0)
    mv t1, a0                # Salva o número de perguntas em t1
    
    # Le o número inteiro (b)
    li a7, 5                 # "load immediate" -> O registrador a7 recebe o número 5
    ecall                    # Realiza a ação registrada em a7, usando a0 como recipiente (5: le inteiro e guarda em a0)
    mv t2, a0                # Salva o número de perguntas em t1
    
    # Checa se n é uma entrada valida
    li t3, 1
    ble t1, t3, branchINVALIDO  # Basicamente finaliza o programa se o valor entrado é menor ou igual a 1
    ble t2, t3, branchINVALIDO  # Basicamente finaliza o programa se o valor entrado é menor ou igual a 1
       

   # Calcula o MDC com teorema dos restos
   mv t4, t1
   mv t5, t2
   loop:
   	rem t6, t4, t5   	# Calcula o resto da divisão de t4 por t5
  	beqz t6, mdc_done   # Se o resto é zero, terminar o loop
  	mv t4, t5   		# Colocar o divisor atual em t4
  	mv t5, t6   		# Colocar o resto como o próximo divisor
  	j loop   		# Voltar ao início do loop

   mdc_done:
    	# Imprime o MDC
    	li a7, 1                # "load immediate" -> O registrador a7 recebe o número 1
    	mv a0, t5               # Move o número de respostas corretas para a0
    	ecall                   # Realiza a ação registrada em a7, usando a0 como recipiente (1: imprime inteiro guardado em a0)
    
    	# Imprime a \n na tela
    	li a7, 4                # "load immediate" -> O registrador a7 recebe o número 4
    	la a0, quebralinha      # "load address" -> Carrega o endereço da mensagem em a0
    	ecall                   # Realiza a ação registrada em a7, usando a0 como recipiente (4: imprime string guardada em a0)
    
    	# Calcula o MMC
    	mul t3, t1, t2   # Multiplica os dois valores
    	div t5, t3, t5   # Divide o resultado pelo MDC
    
    	# Imprime o MMC
    	li a7, 1                # "load immediate" -> O registrador a7 recebe o número 1
    	mv a0, t5               # Move o número de respostas corretas para a0
    	ecall                   # Realiza a ação registrada em a7, usando a0 como recipiente (1: imprime inteiro guardado em a0)
    
                                            
    end:
    	# Imprime a \n na tela
    	li a7, 4                # "load immediate" -> O registrador a7 recebe o número 4
    	la a0, quebralinha      # "load address" -> Carrega o endereço da mensagem em a0
    	ecall                   # Realiza a ação registrada em a7, usando a0 como recipiente (4: imprime string guardada em a0)

    	# Return 0
    	li a0, 0		     # "load immediate" -> O registrador a0 recebe o numero 0
    	li a7, 93 		     # "load immediate" -> O registrador a7 recebe o numero 93
    	ecall 		     # Realiza a ação registrada em a7, usando a0 como recipiente (93: exit)


branchINVALIDO:
   la a0, invalido          # a0 é iniciado com a mensagem de invalido
   li a7, 4                # "load immediate" -> O registrador a7 recebe o número 4
   ecall                   # Realiza a ação registrada em a7, usando a0 como recipiente (4: imprime string guardada em a0)
   j end
